:mod:`snowmobile.core.qa`
=========================

.. py:module:: snowmobile.core.qa

.. autoapi-nested-parse::

   Module contains the :class:`statement.Diff` object, which is the class
   associated with all tags that have :attr:`Tag.Name.anchor`='qa-diff'.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   snowmobile.core.qa.QA
   snowmobile.core.qa.Empty
   snowmobile.core.qa.Diff



.. py:class:: QA(sn: Connector, **kwargs)

   Bases: :class:`snowmobile.core.Statement`

   Base class for QA statements.

   .. attribute:: MSG
      :annotation: = object-specific exception message goes here.

      

   .. method:: set_outcome(self)

      Updates ._outcome upon completion of processing invoked by .process().




.. py:class:: Empty(sn: Connector, **kwargs)

   Bases: :class:`snowmobile.core.qa.QA`

   QA class for results expected to be empty.

   .. attribute:: MSG
      :annotation: = a 'qa-empty' check did not pass its validation; this means that a query you expected to return empty results returned a non-zero number of records.

      

   .. method:: process(self) -> QA

      Over-ride method; checks if results are empty and updates outcome



.. py:class:: Diff(sn: Connector = None, **kwargs)

   Bases: :class:`snowmobile.core.qa.QA`

   QA class for comparison of values within a table based on
   partitioning on a field.

   .. attribute:: partition_on

      Column name to partition data on before comparing the
      partitioned datasets; defaults to 'src_description`.

      :type: str

   .. attribute:: end_index_at

      Column name that marks the last column to use as an index column
      when joining the partitioned datasets back together.

      :type: str

   .. attribute:: compare_patterns

      Regex patterns to match columns on that should be *included* in
      comparison (numeric columns you're running QA on).

      :type: list

   .. attribute:: ignore_patterns

      Regex patterns to match columns on that should be *ignored* both
      for the comparison and the index.

      :type: list

   .. attribute:: generic_metric_col_nm

      Column name to use for the melted field names; defaults to 'Metric'.

      :type: str

   .. attribute:: compare_cols

      Columns that are used in comparison once statement is executed
      and parsing is applied.

      :type: list

   .. attribute:: drop_cols

      Columns that are dropped once statement is executed and parsing
      is applied.

      :type: list

   .. attribute:: idx_cols

      Columns that are used for the index to join the data back
      together once statement is executed and parsing is applied.

      :type: list

   .. attribute:: ub_raw

      Maximum absolute raw difference (upper bound) that two fields
      that are being compared can differ from each other without
      causing a failure.

      :type: float

   .. attribute:: ub_perc

      Maximum absolute percentage difference (upper bound) that two
      comparison fields can differ from each other without causing a
      failure.

      :type: float

   .. attribute:: MSG
      :annotation: = a 'qa-diff' check did not pass its validation; this means that the difference in the values compared did not fall within the specified threshold.

      

   .. method:: split_cols(self) -> Diff

      Post-processes results returned from a ``qa-diff`` statement.

      Executes private methods to split columns into:
          * Index columns
          * Drop columns
          * Comparison columns

      Then runs checks needed to ensure minimum requirements are met in order
      for a valid partition/comparison to be made.


   .. method:: partitioned_by(self) -> Set[Any]
      :property:

      Distinct values within the ``partition_on`` column that data is
      partitioned by.


   .. method:: partitions_are_equal(partitions: Dict[str, pd.DataFrame], abs_tol: float, rel_tol: float) -> bool
      :staticmethod:

      Evaluates if a dictionary of DataFrames are identical.

      :param partitions: A dictionary of DataFrames returned by
                         :meth:`snowmobile.DataFrame`.
      :type partitions: Dict[str, pd.DataFrame]
      :param abs_tol: Absolute tolerance for difference in any value amongst the
                      DataFrames being compared.
      :type abs_tol: float
      :param rel_tol: Relative tolerance for difference in any value amongst the
                      DataFrames being compared.
      :type rel_tol: float

      Returns (bool):
          Indication of equality amongst all the DataFrames contained in
          ``partitions``.


   .. method:: process(self) -> Diff

      Post-processing for :class:`Diff`-specific results.



