:mod:`snowmobile.core.errors`
=============================

.. py:module:: snowmobile.core.errors

.. autoapi-nested-parse::

   Snowmobile exceptions.



Module Contents
---------------

.. py:exception:: Error(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`Exception`

   Base Snowmobile exception class.

   :param msg: Error message.
   :type msg: Optional[str]
   :param msg: Error number.
   :type msg: Optional[int]
   :param nm: Globally unique name for an exception being raised; used for
              InternalExceptions and statement names when QA failures occur.
   :type nm: Optional[str]
   :param to_raise: Indicates that the exception should be raised before exiting the
                    current context.
   :type to_raise: Optional[bool]

   .. attribute:: tmstmp

      Unix instantiation timestamp of the exception (in seconds).

      :type: int

   .. attribute:: raised

      Indicator of whether or not the instance has already been raised;
      used for exception chaining from Statement -> Script.

      :type: bool

   .. method:: escalate(self)

      Raises error.


   .. method:: format_error_args(prefix: Optional[str] = None, sep: Optional[str] = None, lines: Optional[int] = None, _filter: bool = True, **kwargs: Dict[str, str]) -> str
      :staticmethod:

      Formats a dictionary of arguments into an aligned/indented error msg.

      Placed below primary msg such that a primary msg of 'This is a __ error.'
      combined with the returned value from this method provided with
      kwargs={'argument-description1': 'argument-value', 'arg2-desc': 'arg2-value'}
      would produce the following error message:
          ```
          This is a __ error.
              argument-description: argument-value
                         arg2-desc: arg2-value
          ```

      :param prefix: Character to prefix bullets with; defaults to ' '.
      :type prefix: str
      :param sep: Character to separate arguments/values with; defaults to ':'.
      :type sep: str
      :param lines: Number of lines to include between arguments; defaults to 1.
      :type lines: int
      :param _filter: Indicator of whether to filter out key/value pairs that contain
                      empty values; defaults to `True`.
      :type _filter: bool
      :param \*\*kwargs: Argument keys and values to be converted into a list.

      Returns (str):
          Formatted arguments as a string.



.. py:exception:: InternalError(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Internal error class for detection/testing of edge-case exceptions.



.. py:exception:: StatementInternalError(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.InternalError`

   Internal error class for Statement and derived classes.


.. py:exception:: StatementPostProcessingError(msg: Optional[str] = None, errno: Optional[int] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Exceptions that occur in the post-processing invoked by `s.process()`.

   Indicates a non-database error occurred in the over-ride :meth:`process()`
   method from a derived class of :class:`Statement`.


.. py:exception:: QAFailure(nm: str, msg: str, idx: int, desc: Optional[str] = None, errno: Optional[int] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Exceptions that occur in post-processing invoked by `s.process()`.

   Indicates a non-database error occurred in the :meth:`process()` over-ride
   method of :class:`Statement`'s derived classes.

   :param nm: Tag name of QA statement.
   :type nm: str
   :param desc: Object-specific exception message to display.
   :type desc: str
   :param idx: Index of the statement that failed its QA check.
   :type idx: int


.. py:exception:: QAEmptyFailure(nm: str, msg: str, idx: int, desc: Optional[str] = None, errno: Optional[int] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.QAFailure`

   Exception class for `qa.Empty` statements.


.. py:exception:: QADiffFailure(nm: str, msg: str, idx: int, desc: Optional[str] = None, errno: Optional[int] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.QAFailure`

   Exception class for `qa.Empty` statements.


.. py:exception:: SnowFrameInternalError(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.InternalError`

   Internal error class for 'class:`SnowFrame`.


.. py:exception:: StatementNotFoundError(nm: str, statements: List[str] = None, msg: Optional[str] = None, errno: Optional[int] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Exceptions due to an invalid statement name or index.


.. py:exception:: DuplicateTagError(nm: str, msg: Optional[str] = None, errno: Optional[int] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Exceptions due to a duplicate statement tag.


.. py:exception:: LoadingInternalError(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.InternalError`

   Exception class for errors boundary exception detection while loading.


.. py:exception:: ExistingTableError(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Table exists and `if_exists=Fail`


.. py:exception:: ColumnMismatchError(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Columns do not match and `if_exists!='replace'`


.. py:exception:: FileFormatNameError(nm: str, statements: List[str] = None, msg: Optional[str] = None, errno: Optional[int] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.StatementNotFoundError`

   The name of the provided file format is invalid.


.. py:exception:: InvalidTagsError(msg: Optional[str] = None, errno: Optional[int] = None, nm: Optional[str] = None, to_raise: Optional[bool] = False)

   Bases: :class:`snowmobile.core.errors.Error`

   Error to be raised when a given statement tag is not valid.


.. data:: db_errors
   

   

.. data:: snowmobile_errors
   

   

