:mod:`snowmobile.core.tag`
==========================

.. py:module:: snowmobile.core.tag

.. autoapi-nested-parse::

   Base class for all :class:`Statement` objects.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   snowmobile.core.tag.Tag



.. py:class:: Tag(configuration: Configuration, nm_pr: Optional[str] = None, sql: Optional[str] = None, index: Optional[int] = None)

   Bases: :class:`snowmobile.core.Snowmobile`

   Handles the decomposition/parsing of statement tags.

   Should never be instantiated directly by the user-facing API but its
   attributes are likely to be accessed often as part of :class:`Statement`
   and derived classes.

   .. attribute:: cfg

      :class:`snowmobile.Configuration` object; represents fully parsed
      **snowmobile.toml** file.

      :type: snowmobile.Configuration

   .. attribute:: patt

      :class:`snowmobile.Schema.Pattern` object; represents
      ``script.patterns`` section of **snowmobile.toml**.

      :type: snowmobile.Schema.Pattern

   .. attribute:: nm_pr

      Provided tag name for a given :class:`Statement`; can be empty.

      :type: str

   .. attribute:: index

      Statement index position within :class:`Script`; can be empty.

      :type: int

   .. attribute:: is_included

      Indicator of whether or not the combination of all scopes for this
      statement tag is included within a given context.

      :type: bool

   .. attribute:: incl_idx_in_desc

      Indicator of whether or not to include the statement index in the
      `description` component of the tag; defaults to `True` so that all
      generated statement tags are guaranteed to be unique for a given
      script.
          *   Mainly included for testing purposes where setting to
              `False` enables comparing generated to provided statement
              tags without having to change the index position of the
              hard-coded/provided statement tag when adding/removing tests.

      :type: bool

   .. attribute:: obj_pr

      The statement's `object name` if :attr:`is_struct_desc` evaluates
      to `True`; empty string otherwise.

      :type: str

   .. attribute:: desc_pr

      The statement's `description` if :attr:`is_struct_desc` evaluates
      to `True`; empty string otherwise.

      :type: str

   .. attribute:: anchor_pr

      The statement's `anchor`.

      :type: str

   .. attribute:: first_line

      A raw string of the first line of sql associated with the statement.

      :type: str

   .. attribute:: first_line_remainder

      The remainder of the first line once excluding the
      :attr:`first_keyword` and stripping repeating whitespace.

      :type: str

   .. attribute:: kw

      The final statement's **keyword** that is used elsewhere; this will
      be the provided keyword if a statement tag exists and a
      parsed/generated keyword otherwise.

      :type: str

   .. attribute:: nm

      The final statement's **name** that is used elsewhere; this will
      be the full tag name if a statement tag exists and a
      parsed/generated tag name otherwise.

      :type: str

   .. attribute:: obj

      The final statement's **object** that is used elsewhere; this will
      be the object within a tag if a statement tag exists and follows
      the correct structure and a parsed/generated object otherwise.

      :type: str

   .. attribute:: desc

      The final statement's **description** that is used elsewhere; this
      will be the description within a tag if a statement tag exists
      and follows the correct structure and a parsed/generated
      description otherwise.

      :type: str

   .. attribute:: anchor

      The final statement's **anchor** that is used elsewhere; this will
      be the anchor within a tag if a statement tag exists and follows
      the correct structure and a parsed/generated tag name otherwise.

      :type: str

   .. attribute:: scopes

      Combination of all scopes for a given tag; this is essentially the
      all possible combinations of including/excluding any of the `kw`,
      `nm`, `obj`, `desc`, and `anchor` for a given instance of :class:`Tag`.

      :type: set[Scope]

   .. method:: scope(self, **kwargs) -> bool

      Evaluates all component's of a tag's scope against a set of filter args.

          **kwargs:
              Keyword arguments passed to :class:`Script.filter()` (e.g.
              `incl_kw`, `excl_kw`, ..)

      Returns (bool):
          Value indicating whether or not the statement should be included
          based on the outcome of the evaluation of all of its components.


   .. method:: obj_ge(self)
      :property:

      Generated `object` for statement.


   .. method:: desc_ge(self)
      :property:

      Generated `description` for statement.


   .. method:: anchor_ge(self)
      :property:

      Generated `anchor` for statement.


   .. method:: nm_ge(self)
      :property:

      Generated `name`; full statement tag for statement.



