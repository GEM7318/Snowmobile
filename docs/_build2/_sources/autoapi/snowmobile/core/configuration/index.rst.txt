:mod:`snowmobile.core.configuration`
====================================

.. py:module:: snowmobile.core.configuration

.. autoapi-nested-parse::

   Module handles:
   * Locating a populated configuration file
   * Caching of this location
   * Parsing/instantiating the full configuration object
   * Exporting a template configuration file



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   snowmobile.core.configuration.Configuration



.. py:class:: Configuration(config_file_nm: Optional[str] = None, creds: Optional[str] = None, from_config: Optional[Path, str] = None, export_dir: Optional[Path, str] = None)

   Bases: :class:`snowmobile.core.base.Snowmobile`

   User-facing access point for a fully parsed ``snowmobile.toml`` file.


   :param config_file_nm: Name of configuration file to use; defaults to `snowmobile.toml`.
   :type config_file_nm: Optional[str]
   :param creds: Alias for the set of credentials to authenticate with; default
                 behavior will fall back to the ``connection.default-creds``
                 specified in `snowmobile.toml`, `or the first set of credentials
                 stored if this configuration option is left blank`.
   :type creds: Optional[str]
   :param from_config: A full path to a specific configuration file to use; bypasses any
                       checks for a cached file location and can be useful for container-based
                       processes with restricted access to the local file system.
   :type from_config: Optional[str, Path]
   :param export_dir: Path to export a template ``snowmobile.toml`` file to; if provided,
                      the file will be exported within the __init__ method and nothing
                      else will be instantiated.
   :type export_dir: Optional[Path]

   .. attribute:: file_nm

      Name of configuration file provided; defaults to `snowmobile.toml`.

      :type: str

   .. attribute:: cache

      :class:`snowmobile.core.Cache` object for tracking the location
      of ``snowmobile.toml`` across ``snowmobile`` instances.

      :type: Cache

   .. attribute:: location

      Path to configuration file used to instantiate the instance with.

      :type: Path

   .. attribute:: connection

      **[connection]** section of ``snowmobile.toml``.

      :type: snowmobile.core.cfg.Connection

   .. attribute:: loading

      **[loading]** section of ``snowmobile.toml``.

      :type: snowmobile.core.cfg.Loading

   .. attribute:: script

      **[script]** section of ``snowmobile.toml``.

      :type: snowmobile.core.cfg.Script

   .. attribute:: sql

      **[sql]** section of ``snowmobile.toml``.

      :type: snowmobile.core.cfg.SQL

   .. attribute:: ext_locations

      **[extension-paths]** section of ``snowmobile.toml``.

      :type: snowmobile.core.cfg.Locations

   .. attribute:: SCOPE_ATTRIBUTES
      :annotation: = ['kw', 'obj', 'desc', 'anchor', 'nm']

      

   .. attribute:: SCOPE_TYPES
      :annotation: = ['incl', 'excl']

      

   .. attribute:: DEF_DESC
      :annotation: = statement

      

   .. attribute:: QA_ANCHORS
      

      

   .. method:: markdown(self) -> cfg.Markdown
      :property:

      Accessor for cfg.script.markdown.


   .. method:: attrs(self) -> cfg.Attributes
      :property:

      Accessor for cfg.script.markdown.attributes.


   .. method:: wildcards(self) -> cfg.Wildcard
      :property:

      Accessor for cfg.script.patterns.wildcards.


   .. method:: batch_set_attrs(obj: Any, attrs: dict, to_none: bool = False)
      :staticmethod:

      Batch sets attributes on an object from a dictionary.

      :param obj: Object to set attributes on.
      :type obj: Any
      :param attrs: Dictionary containing attributes.
      :type attrs: dict
      :param to_none: Set all of the object's attributes batching a key in ``attrs``
                      to `None`; defaults ot `False`.
      :type to_none: bool

      Returns (Any):
          Object post-setting attributes.


   .. method:: attrs_from_obj(obj: Any, within: Optional[List[str]] = None) -> Dict[str, MethodType]
      :staticmethod:

      Utility to return attributes/properties from an object as a dictionary.


   .. method:: methods_from_obj(obj: Any, within: Optional[List[str]] = None) -> Dict[str, MethodType]
      :staticmethod:

      Utility to return attributes/properties from an object as a dictionary.


   .. method:: scopes(self)
      :property:

      All combinations of scope type and scope attribute.


   .. method:: scopes_from_kwargs(self, only_populated: bool = False, **kwargs) -> Dict

      Turns filter arguments into a valid set of kwargs for :class:`Scope`.

      Returns dictionary of all combinations of 'arg' ("kw", "obj", "desc",
      "anchor" and "nm"), including empty sets for any 'arg' not included
      in the keyword arguments provided.


   .. method:: scopes_from_tag(self, t: Any)

      Generates list of keyword arguments to instantiate all scopes for a tag.


   .. method:: json(self, by_alias: bool = False, **kwargs)

      Serialization method for core object model.



