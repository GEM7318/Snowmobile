:mod:`snowmobile.core.configuration`
====================================

.. py:module:: snowmobile.core.configuration

.. autoapi-nested-parse::

   Module handles:
   * Exporting an initial configuration file
   * Locating a populated configuration file
   * Caching of this location
   * Parsing/instantiating the full configuration object



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   snowmobile.core.configuration.Configuration



.. py:class:: Configuration(config_file_nm: Optional[str] = None, creds: Optional[str] = None, from_config: Optional[Path] = None, export_dir: Optional[Path] = None)

   Bases: :class:`snowmobile.core.base.Snowmobile`

   User-facing access point for a fully parsed ``snowmobile.toml`` file.


   :param config_file_nm: Name of .toml configuration file following the format of
                          ``snowmobile_SAMPLE.toml`` (defaults to `snowmobile.toml`).
   :type config_file_nm: str
   :param creds: Name of connection within [credentials] section of .toml file
                 to use, defaults to the first set of credentials if creds
                 isn't explicitly passed.
   :type creds: str
   :param from_config: Optionally pass in a full pathlib.Path object to a specific
                       `.toml` configuration file matching the format of
                       `snowmobile_SAMPLE.toml`.
   :type from_config: Union[str, Path]

   .. attribute:: SCOPE_ATTRIBUTES
      :annotation: = ['kw', 'obj', 'desc', 'anchor', 'nm']

      

   .. attribute:: SCOPE_TYPES
      :annotation: = ['incl', 'excl']

      

   .. attribute:: DEF_OBJ
      :annotation: = 

      

   .. attribute:: DEF_DESC
      :annotation: = statement

      

   .. attribute:: QA_ANCHORS
      

      

   .. method:: markdown(self) -> cfg.Markdown
      :property:

      Accessor for cfg.script.markdown.


   .. method:: attrs(self) -> cfg.Attributes
      :property:

      Accessor for cfg.script.markdown.attributes.


   .. method:: wildcards(self) -> cfg.Wildcard
      :property:

      Accessor for cfg.script.patterns.wildcards.


   .. method:: batch_set_attrs(obj: Any, attrs: dict, to_none: bool = False)
      :staticmethod:

      Batch sets attributes on an object from a dictionary.

      :param obj: Object to set attributes on.
      :type obj: Any
      :param attrs: Dictionary containing attributes.
      :type attrs: dict
      :param to_none: Set all of the object's attributes batching a key in ``attrs``
                      to `None`; defaults ot `False`.
      :type to_none: bool

      Returns (Any):
          Object post-setting attributes.


   .. method:: attrs_from_obj(obj: Any, within: Optional[List[str]] = None) -> Dict[str, MethodType]
      :staticmethod:

      Utility to return attributes/properties from an object as a dictionary.


   .. method:: methods_from_obj(obj: Any, within: Optional[List[str]] = None) -> Dict[str, MethodType]
      :staticmethod:

      Utility to return attributes/properties from an object as a dictionary.


   .. method:: scopes(self)
      :property:

      All combinations of scope type and scope attribute.


   .. method:: scopes_from_kwargs(self, only_populated: bool = False, **kwargs) -> Dict

      Turns filter arguments into a valid set of kwargs for :class:`Scope`.

      Returns dictionary of all combinations of 'arg' ("kw", "obj", "desc",
      "anchor" and "nm"), including empty sets for any 'arg' not included
      in the keyword arguments provided.


   .. method:: scopes_from_tag(self, t: Any)

      Generates list of keyword arguments to instantiate all scopes for a tag.


   .. method:: json(self, by_alias: bool = False, **kwargs)

      Serialization method for core object model.



