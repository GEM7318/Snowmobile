:mod:`snowmobile.core.connector`
================================

.. py:module:: snowmobile.core.connector

.. autoapi-nested-parse::

   :class:`snowmobile.Connector` is the core of ``snowmobile``'s object model and a given
   instance is often shared across multiple objects at once.

   It is the primary method of executing statements against the warehouse and
   it stores the fully parsed & validated ``snowmobile.toml`` file it was
   instantiated with as its :attr:`snowmobile.cfg` attribute.

   Within ``snowmobile``'s code and documentation, it is referred to as ``sn``
   for brevity.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   snowmobile.core.connector.Connector



.. py:class:: Connector(creds: Optional[str] = None, delay: bool = False, ensure_alive: bool = True, config_file_nm: Optional[str] = None, from_config: Optional[str, Path] = None, **connect_kwargs)

   Bases: :class:`snowmobile.core.Snowmobile`

   Primary method of statement execution and configuration management.

   :param creds: Alias for the set of credentials to authenticate with; default
                 behavior will fall back to the ``connection.default-creds``
                 specified in `snowmobile.toml`, `or the first set of credentials
                 stored if this configuration option is left blank`.
   :type creds: Optional[str]
   :param delay: Optionally delay establishing a connection when the object is
                 instantiated, enabling access to the configuration object model
                 through the :attr:`Connector.cfg` attribute; defaults to `False`.
   :type delay: bool
   :param ensure_alive: Establishes a new connection if a method requiring a connection
                        against the database is called while :attr:`alive` is `False`;
                        defaults to `True`.
   :type ensure_alive: bool
   :param config_file_nm: Name of configuration file to use; defaults to `snowmobile.toml`.
   :type config_file_nm: Optional[str]
   :param from_config: A full path to a specific configuration file to use; bypasses any
                       checks for a cached file location and can be useful for container-based
                       processes with restricted access to the local file system.
   :type from_config: Optional[str, Path]
   :param \*\*connect_kwargs: Additional arguments to provide to :meth:`snowflake.connector.connect()`;
                              arguments provided here will over-ride connection arguments specified
                              in `snowmobile.toml`, including:
                                  *   Connection parameters in `connection.default-arguments`
                                  *   Credentials parameters associated with a given alias
                                  *   Connection parameters associated with a given alias

   .. attribute:: cfg

      :class:`snowmobile.Configuration` object, which represents a fully
      parsed/validated `snowmobile.toml` file.

      :type: Configuration`

   .. attribute:: con

      :class:`SnowflakeConnection` object; this attribute is populated
      when a connection is established and can be `None` if the
      :class:`Connector` object was instantiated with `delay=True`.

      :type: SnowflakeConnection

   .. attribute:: sql

      A :class:`snowmobile.SQL` object with the current connection
      embedded; stores command sql commands as utility methods and is
      heavily leveraged in `snowmobile`'s internals.

      :type: SQL

   .. attribute:: e

      A :class:`snowmobile.ExceptionHandler` object for orchestrating
      exceptions across objects; kept as a public attribute on the class
      as examining its contents can be helpful in debugging database errors
      during development.

      :type: ExceptionHandler

   .. method:: connect(self, **kwargs) -> Connector

      Establishes connection to Snowflake.

      Re-implements :func:`snowflake.connector.connect()` with connection
      arguments sourced from snowmobile's object model, specifically:
          *   Credentials from ``snowmobile.toml``.
          *   Default connection arguments from ``snowmobile.toml``.
          *   Optional keyword arguments either passed to
              :class:`snowmobile.Connect` or directly to this method.

          kwargs:
              Optional keyword arguments to pass to
              snowflake.connector.connect(); arguments passed here will
              over-ride ``connection.default-arguments`` specified in
              ``snowmobile.toml``.


   .. method:: disconnect(self) -> Connector

      Disconnect from connection with which Connector() was instantiated.


   .. method:: alive(self) -> bool
      :property:

      Check if the connection is alive.


   .. method:: cursor(self) -> SnowflakeCursor
      :property:

      :class:`SnowflakeCursor` accessor.


   .. method:: dictcursor(self) -> DictCursor
      :property:

      :class:`DictCursor` accessor.


   .. method:: ex(self, sql: str, on_error: Optional[str] = None, **kwargs) -> SnowflakeCursor

      Executes a command via :class:`SnowflakeCursor`.

      :param sql: ``sql`` command as a string.
      :type sql: str
      :param on_error: String value to impose a specific behavior if an error occurs
                       during the execution of ``sql``.
      :type on_error: str
      :param \*\*kwargs: Optional keyword arguments for :meth:`SnowflakeCursor.execute()`.

      Returns (SnowflakeCursor):
          :class:`SnowflakeCursor` object that executed the command.


   .. method:: exd(self, sql: str, on_error: Optional[str] = None, **kwargs) -> DictCursor

      Executes a command via :class:`DictCursor`.

      :param sql: ``sql`` command as a string.
      :type sql: str
      :param on_error: String value to impose a specific behavior if an error occurs
                       during the execution of ``sql``.
      :type on_error: str
      :param \*\*kwargs: Optional keyword arguments for :meth:`SnowflakeCursor.execute()`.

      Returns (DictCursor):
          :class:`DictCursor` object that executed the command.


   .. method:: query(self, sql: str, as_df: bool = True, lower: bool = True, on_error: Optional[str] = None) -> Union[pd.DataFrame, SnowflakeCursor]

      Execute a query and return results.

       Default behavior of `results=True` will return results as a
       :class:`pandas.DataFrame`, otherwise will execute the sql provided
       with a :class:`SnowflakeCursor` and return the cursor object.

      :param sql: Raw SQL to execute.
      :type sql: str
      :param as_df: Boolean value indicating whether or not to return results.
      :type as_df: bool
      :param lower: Boolean value indicating whether or not to return results
                    with columns lower-cased.
      :type lower: bool
      :param on_error: String value to impose a specific behavior if an error occurs
                       during the execution of ``sql``.
      :type on_error: str

      Returns (Union[pd.DataFrame, SnowflakeCursor]):
          Results from ``sql`` as a :class:`DataFrame` by default or the
          :class:`SnowflakeCursor` object if `results=False`.


   .. method:: to_table(self, df: pd.DataFrame, table: str, file_format: Optional[str] = None, incl_tmstmp: Optional[bool] = None, on_error: Optional[str] = None, if_exists: Optional[str] = None, as_is: bool = False, **kwargs)

      Table re-implementation.



