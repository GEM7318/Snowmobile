:mod:`snowmobile`
=================

.. py:module:: snowmobile

.. autoapi-nested-parse::

   A wrapper library around the snowflake-connector-python for streamlined
   interaction with the Snowflake database.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   core/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   snowmobile.SQL
   snowmobile.Configuration
   snowmobile.Connect
   snowmobile.Connector
   snowmobile.Loader
   snowmobile.Script
   snowmobile.Statement



Functions
~~~~~~~~~

.. autoapisummary::

   snowmobile.export_config





.. py:class:: SQL(sn=None, nm: Optional[str] = None, obj: Optional[str] = None, auto_run: Optional[bool] = True)

   Bases: :class:`snowmobile.core.Snowmobile`

   SQL class for generation & execution of common sql commands.

   Intended to be interacted with as an attribute of :class:`snowmobile.Connect`.

   .. note::

      *   All arguments except for :attr:`sn` are optional.
      *   The benefit of setting the other attributes on an instance of :class:`SQL`
          is to (optionally) avoid passing the same information to multiple methods
          when generating a variety of statements around the same object.

   .. attribute:: sn

      :class:`snowmobile.Connect` for sql execution and connection information.

      :type: snowmobile.Connect

   .. attribute:: nm

      Object name to use in generated sql (e.g. 'some_table_name')

      :type: str

   .. attribute:: obj

      Object type to use in generated sql (e.g. 'table')

      :type: str

   .. attribute:: schema

      Schema to use when dot-prefixing sql; defaults to the schema with which the
      :attr:`sn` is connected to.

      :type: str

   .. attribute:: auto_run

      Indicates whether to automatically execute the sql generated by a given
      method; defaults to *True*

      :type: bool

   .. method:: info_schema_tables(self, nm: Optional[str] = None, fields: List[str] = None, restrictions: Dict[str, str] = None, order_by: List[Optional[str, int]] = None, all_schemas: bool = False, run: bool = None) -> Union[str, pd.DataFrame]

      Query ``information_schema.tables`` for a given table or view.

      :param nm: Table name, including schema if creating a stage outside of the
                 current schema.
      :type nm: str
      :param fields: List of fields to include in returned results (e.g.
                     ['table_name', 'table_type', 'last_altered'])
      :type fields: List[str]
      :param restrictions: List of conditionals typed as literal components of a `where`
                           clause (e.g.
                           ["table_type = 'base table'", 'last_altered::date = current_date()']
                           ).
      :type restrictions: List[str]
      :param order_by: List of fields or their ordinal positions to order the results by.
      :type order_by: List[str]
      :param all_schemas: Include tables/views from all schemas; defaults to `False`.
      :type all_schemas: bool
      :param run: Determines whether to run the generated sql or not; defaults to `None`
                  which will reference the current value of the :attr:`auto_run` attribute
                  which defaults to `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: info_schema_columns(self, nm: Optional[str] = None, fields: Optional[List] = None, restrictions: Optional[Dict] = None, order_by: Optional[List] = None, all_schemas: bool = False, run: bool = None) -> Union[str, pd.DataFrame]

      Query ``information_schema.columns`` for a given table or view.

      :param nm: Table name, including schema if creating a stage outside of the
                 current schema.
      :type nm: str
      :param fields: List of fields to include in returned results (e.g.
                     ['ordinal_position', 'column_name', 'data_type'])
      :type fields: List[str]
      :param restrictions: List of conditionals typed as literal components of a `where`
                           clause (e.g.["regexp_count(lower(column_name), 'tmstmp') = 0"]).
      :type restrictions: List[str]
      :param order_by: List of fields or their ordinal positions to order the results by.
      :type order_by: List[str]
      :param all_schemas: Include tables/views from all schemas; defaults to `False`.
      :type all_schemas: bool
      :param run: Determines whether to run the generated sql or not; defaults to `None`
                  which will reference the current value of the :attr:`auto_run` attribute
                  which defaults to `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: cnt_records(self, nm: Optional[str] = None, run: bool = None)

      Number of records within a table or view.

      :param nm: Table name, including schema if creating a stage outside of the
                 current schema.
      :type nm: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: table_last_altered(self, nm: Optional[str] = None, run: bool = None) -> Union[str, pd.DataFrame]

      Last altered timestamp for a table or view.

      :param nm: Table name, including schema if creating a stage outside of the
                 current schema.
      :type nm: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: create_stage(self, nm_stage: str, nm_format: str, replace: bool = False, run: bool = None) -> Union[str, pd.DataFrame]

      Create a staging table.

      :param nm_stage: Name of stage to create, including schema if creating a stage
                       outside of the current schema.
      :type nm_stage: str
      :param nm_format: Name of file format to specify for the stage, including schema
                        if using a format from outside of the current schema.
      :type nm_format: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool
      :param replace: Indicates whether to replace an existing stage if pre-existing;
                      default is `False`.
      :type replace: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: drop(self, nm: Optional[str] = None, obj: Optional[str] = None, run: bool = None) -> Union[str, pd.DataFrame]

      Drop a ``Snowflake`` object.

      :param nm: Name of the object to drop, including schema if creating a stage
                 outside of the current schema.
      :type nm: str
      :param obj: Type of object to drop (e.g. 'table', 'schema', etc)
      :type obj: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: clone(self, nm: Optional[str] = None, to: Optional[str] = None, obj: Optional[str] = None, run: bool = None, replace: bool = False) -> Union[str, pd.DataFrame]

      Clone a ``Snowflake`` object.

      .. warning::

         *   Make sure to read `Snowflake's documentation
             <https://docs.snowflake.com/en/sql-reference/sql/create-clone.html>`_
             for restrictions and considerations when cloning objects.

      .. note::

         *   In this specific method, the value provided to ``nm`` and ``to``
             can be a single object name, a single schema, or both in the
             form of `obj_schema.obj_name` depending on the desired outcome.
         *   Additionally, **at least one of the** ``nm`` **or** ``to``
             **arguments must be provided**.
         *   The defaults for the target object are constructed such that
             users can **either**:
                 1.  Clone objects to *other* schemas that inherit the
                     source object's *name* without specifying so in the
                     ``to`` argument, **or**
                 2.  Clone objects within the *current* schema that inherit
                     the source object's *schema* without specifying so in
                     the ``to`` argument.
         *   If providing a schema without a name to either argument, prefix
             the value provided with `__` to signify it's a schema and not
             a lower-level object to be cloned.
                 *   e.g. providing `nm='sample_table'` and
                     `to='__sandbox'` will clone `sample_table` from the
                     current schema to `sandbox.sample_table`.
         *   An assertion error will be raised raised if neither argument
             is specified as *this would result in a command to clone an
             object and store it in an object that has the same name &
             schema as the object being cloned*.

      :param nm: Name of the object to clone, including schema if cloning an
                 object outside of the current schema.
      :type nm: str
      :param to: Target name for cloned object, including schema if cloning an
                 object outside of the current schema.
      :type to: str
      :param obj: Type of object to clone (e.g. 'table', 'view', 'file-format');
                  defaults to `table`.
      :type obj: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool
      :param replace: Indicates whether to replace an existing stage if pre-existing;
                      default is `False`.
      :type replace: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: put_file_from_stage(self, path: Union[Path, str], nm_stage: str, options: Optional[Dict] = None, ignore_defaults: bool = False, run: bool = None) -> Union[str, pd.DataFrame]

      Generates a 'put' command into a staging table from a local file.

      :param path: Path to local data file as a :class:`pathlib.Path` or string.
      :type path: Union[Path, str]
      :param nm_stage: Name of the staging table to load into.
      :type nm_stage: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool
      :param options: Optional arguments to add to `put` statement in addition to
                      the values specified in the ``loading-defaults.put`` section
                      of **snowmobile.toml**.
      :type options: dict
      :param ignore_defaults: Option to ignore the values specified in **snowmobile.toml**;
                              defaults to `False`.
      :type ignore_defaults: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: copy_into_table_from_stage(self, nm: str, nm_stage: str, options: Optional[Dict] = None, ignore_defaults: bool = False, run: bool = None) -> Union[str, pd.DataFrame]

      Generates a command to copy data into a table from a staging table.

      :param nm: Name of the object to drop, including schema if creating a stage
                 outside of the current schema.
      :type nm: str
      :param nm_stage: Name of the staging table to load from.
      :type nm_stage: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool
      :param options: Optional arguments to add to `put` statement in addition to
                      the values specified in the ``loading-defaults.put`` section
                      of **snowmobile.toml**.
      :type options: dict
      :param ignore_defaults: Option to ignore the values specified in **snowmobile.toml**;
                              defaults to `False`.
      :type ignore_defaults: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: show_file_formats(self, run: bool = None) -> Union[str, pd.DataFrame]

      Lists all file formats in the current schema.

      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: ddl(self, nm: Optional[str] = None, obj: Optional[str] = None, run: bool = None) -> str

      Query the DDL for an in-warehouse object.

      :param nm: Name of the object to get DDL for, including schema if object
                 is outside of the current schema.
      :type nm: str
      :param obj: Type of object to get DDL for (e.g. 'table', 'view', 'file-format').
      :type obj: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (str):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: table_sample(self, nm: Optional[str] = None, n: Optional[int] = None, run: bool = None) -> Union[str, pd.DataFrame]

      Select `n` sample records from a table.

      :param nm: Name of table or view to sample, including schema if the table
                 or view is outside of the current schema.
      :type nm: str
      :param n: Number of records to return, implemented as a 'limit' clause
                in the query; defaults to 1.
      :type n: int
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: truncate(self, nm: str, run: bool = None) -> Union[str, pd.DataFrame]

      Truncate a table.

      :param nm: Name of table, including schema if the table is outside of the
                 current schema.
      :type nm: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: current(self, obj: str, run: bool = None)

      Generic implementation of 'select current' for session-based objects.

      :param obj: Type of object to retrieve information for (schema, session, ..).
      :type obj: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: current_session(self, run: bool = None) -> Union[str, pd.DataFrame]

      Select the current session.


   .. method:: current_schema(self, run: bool = None) -> Union[str, pd.DataFrame]

      Select the current schema.


   .. method:: current_database(self, run: bool = None) -> Union[str, pd.DataFrame]

      Select the current database.


   .. method:: current_warehouse(self, run: bool = None) -> Union[str, pd.DataFrame]

      Select the current warehouse.


   .. method:: current_role(self, run: bool = None) -> Union[str, pd.DataFrame]

      Select the current role.


   .. method:: use(self, nm: str, obj: str, run: bool = None)

      Generic implementation of 'use' command for in-warehouse objects.

      :param nm: Name of object to use (schema name, warehouse name, role name, ..).
      :type nm: str
      :param obj: Type of object to use (schema, warehouse, role, ..).
      :type obj: str
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, pd.DataFrame]):
          Either:
              1.  The results of the query as a :class:`pandas.DataFrame`, or
              2.  The generated query as a :class:`str` of sql.


   .. method:: use_schema(self, nm: Optional[str] = None, run: bool = None) -> Union[str, pd.DataFrame]

      Use schema command.


   .. method:: use_database(self, nm: Optional[str] = None, run: bool = None) -> Union[str, pd.DataFrame]

      Use database command.


   .. method:: use_warehouse(self, nm: Optional[str] = None, run: bool = None) -> Union[str, pd.DataFrame]

      Use warehouse command.


   .. method:: use_role(self, nm: Optional[str] = None, run: bool = None) -> Union[str, pd.DataFrame]

      Use role command.


   .. method:: columns(self, nm: Optional[str] = None, from_info_schema: bool = False, run: bool = None) -> Union[str, List]

      Returns an ordered list of columns for a table or view.

      .. note::

         *   The default behavior of this method is to retrieve the columns
             for a table or view by selecting a single sample record
             from the table and extracting the column names directly off
             the returned :class:`pandas.DataFrame` due to the performance
             gains in selecting a sample record as opposed to querying the
             ``information_schema.columns``.
         *   This can be changed by passing `from_info_schema=False`.

      :param nm: Name of table or view, including schema if the table or view is
                 outside of the current schema.
      :type nm: str
      :param from_info_schema: Indicates whether to retrieve columns via the
                               ``information_schema.columns`` or by selecting a sample record
                               from the table or view; defaults to `False`.
      :type from_info_schema: bool
      :param run: Indicates whether to execute generated sql or return as string;
                  default is `True`.
      :type run: bool

      Returns (Union[str, List]):
          Either:
              1.  An ordered list of columns for the table or view, **or**
              2.  The query against the table or view as a :class:`str` of sql.


   .. method:: exists(self, nm: Optional[str] = None) -> bool

      Checks the existence of a table or view.

      :param nm: Name of table or view, including schema if the table or view is
                 outside of the current schema.
      :type nm: str

      Returns (bool):
          Boolean indication of whether or not the table or view exists.


   .. method:: order(by: List[Union[int, str]]) -> str
      :staticmethod:

      Generates 'order by' clause from a list of fields or field ordinal positions.


   .. method:: where(restrictions: Dict) -> str
      :staticmethod:

      Generates a 'where' clause based on a dictionary of restrictions.

      :param restrictions: A dictionary of conditionals where each key/value pair
                           respectively represents the left/right side of a condition
                           within a 'where' clause.
      :type restrictions: dict

      Returns (str):
          Formatted where clause.


   .. method:: fields(fields: List) -> str
      :staticmethod:

      Utility to generate fields within a 'select' statement.


   .. method:: copy(self) -> SQL

      User-facing copy method.



.. py:class:: Configuration(config_file_nm: Optional[str] = None, creds: Optional[str] = None, from_config: Optional[Path] = None, export_dir: Optional[Path] = None)

   Bases: :class:`snowmobile.core.base.Snowmobile`

   User-facing access point for a fully parsed ``snowmobile.toml`` file.


   :param config_file_nm: Name of .toml configuration file following the format of
                          ``snowmobile_SAMPLE.toml`` (defaults to `snowmobile.toml`).
   :type config_file_nm: str
   :param creds: Name of connection within [credentials] section of .toml file
                 to use, defaults to the first set of credentials if creds
                 isn't explicitly passed.
   :type creds: str
   :param from_config: Optionally pass in a full pathlib.Path object to a specific
                       `.toml` configuration file matching the format of
                       `snowmobile_SAMPLE.toml`.
   :type from_config: Union[str, Path]

   .. attribute:: SCOPE_ATTRIBUTES
      :annotation: = ['kw', 'obj', 'desc', 'anchor', 'nm']

      

   .. attribute:: SCOPE_TYPES
      :annotation: = ['incl', 'excl']

      

   .. attribute:: DEF_OBJ
      :annotation: = 

      

   .. attribute:: DEF_DESC
      :annotation: = statement

      

   .. attribute:: QA_ANCHORS
      

      

   .. method:: markdown(self) -> cfg.Markdown
      :property:

      Accessor for cfg.script.markdown.


   .. method:: attrs(self) -> cfg.Attributes
      :property:

      Accessor for cfg.script.markdown.attributes.


   .. method:: wildcards(self) -> cfg.Wildcard
      :property:

      Accessor for cfg.script.patterns.wildcards.


   .. method:: batch_set_attrs(obj: Any, attrs: dict, to_none: bool = False)
      :staticmethod:

      Batch sets attributes on an object from a dictionary.

      :param obj: Object to set attributes on.
      :type obj: Any
      :param attrs: Dictionary containing attributes.
      :type attrs: dict
      :param to_none: Set all of the object's attributes batching a key in ``attrs``
                      to `None`; defaults ot `False`.
      :type to_none: bool

      Returns (Any):
          Object post-setting attributes.


   .. method:: attrs_from_obj(obj: Any, within: Optional[List[str]] = None) -> Dict[str, MethodType]
      :staticmethod:

      Utility to return attributes/properties from an object as a dictionary.


   .. method:: methods_from_obj(obj: Any, within: Optional[List[str]] = None) -> Dict[str, MethodType]
      :staticmethod:

      Utility to return attributes/properties from an object as a dictionary.


   .. method:: scopes(self)
      :property:

      All combinations of scope type and scope attribute.


   .. method:: scopes_from_kwargs(self, only_populated: bool = False, **kwargs) -> Dict

      Turns filter arguments into a valid set of kwargs for :class:`Scope`.

      Returns dictionary of all combinations of 'arg' ("kw", "obj", "desc",
      "anchor" and "nm"), including empty sets for any 'arg' not included
      in the keyword arguments provided.


   .. method:: scopes_from_tag(self, t: Any)

      Generates list of keyword arguments to instantiate all scopes for a tag.


   .. method:: json(self, by_alias: bool = False, **kwargs)

      Serialization method for core object model.



.. py:class:: Connect(creds: Optional[str] = None, delay: bool = False, ensure_alive: bool = True, config_file_nm: Optional[str] = None, from_config: Optional[str, Path] = None, **connect_kwargs)

   Bases: :class:`snowmobile.core.Snowmobile`

   Primary method of statement execution and configuration management.

   :param creds: Alias for the set of credentials to authenticate with; default
                 behavior will fall back to the ``connection.default-creds``
                 specified in `snowmobile.toml`, `or the first set of credentials
                 stored if this configuration option is left blank`.
   :type creds: Optional[str]
   :param delay: Optionally delay establishing a connection when the object is
                 instantiated, enabling access to the configuration object model
                 through the :attr:`Connector.cfg` attribute; defaults to `False`.
   :type delay: bool
   :param ensure_alive: Establishes a new connection if a method requiring a connection
                        against the database is called while :attr:`alive` is `False`;
                        defaults to `True`.
   :type ensure_alive: bool
   :param config_file_nm: Name of configuration file to use; defaults to `snowmobile.toml`.
   :type config_file_nm: Optional[str]
   :param from_config: A full path to a specific configuration file to use; bypasses any
                       checks for a cached file location and can be useful for container-based
                       processes with restricted access to the local file system.
   :type from_config: Optional[str, Path]
   :param \*\*connect_kwargs: Additional arguments to provide to :meth:`snowflake.connector.connect()`;
                              arguments provided here will over-ride connection arguments specified
                              in `snowmobile.toml`, including:
                                  *   Connection parameters in `connection.default-arguments`
                                  *   Credentials parameters associated with a given alias
                                  *   Connection parameters associated with a given alias

   .. attribute:: cfg

      :class:`snowmobile.Configuration` object, which represents a fully
      parsed/validated `snowmobile.toml` file.

      :type: Configuration`

   .. attribute:: con

      :class:`SnowflakeConnection` object; this attribute is populated
      when a connection is established and can be `None` if the
      :class:`Connector` object was instantiated with `delay=True`.

      :type: SnowflakeConnection

   .. attribute:: sql

      A :class:`snowmobile.SQL` object with the current connection
      embedded; stores command sql commands as utility methods and is
      heavily leveraged in `snowmobile`'s internals.

      :type: SQL

   .. attribute:: e

      A :class:`snowmobile.ExceptionHandler` object for orchestrating
      exceptions across objects; kept as a public attribute on the class
      as examining its contents can be helpful in debugging database errors
      during development.

      :type: ExceptionHandler

   .. method:: connect(self, **kwargs) -> Connector

      Establishes connection to Snowflake.

      Re-implements :func:`snowflake.connector.connect()` with connection
      arguments sourced from snowmobile's object model, specifically:
          *   Credentials from ``snowmobile.toml``.
          *   Default connection arguments from ``snowmobile.toml``.
          *   Optional keyword arguments either passed to
              :class:`snowmobile.Connect` or directly to this method.

          kwargs:
              Optional keyword arguments to pass to
              snowflake.connector.connect(); arguments passed here will
              over-ride ``connection.default-arguments`` specified in
              ``snowmobile.toml``.


   .. method:: disconnect(self) -> Connector

      Disconnect from connection with which Connector() was instantiated.


   .. method:: alive(self) -> bool
      :property:

      Check if the connection is alive.


   .. method:: cursor(self) -> SnowflakeCursor
      :property:

      :class:`SnowflakeCursor` accessor.


   .. method:: ex(self, sql: str, on_error: Optional[str] = None, **kwargs) -> SnowflakeCursor

      Executes a command via :class:`SnowflakeCursor`.

      :param sql: ``sql`` command as a string.
      :type sql: str
      :param on_error: String value to impose a specific behavior if an error occurs
                       during the execution of ``sql``.
      :type on_error: str
      :param \*\*kwargs: Optional keyword arguments for :meth:`SnowflakeCursor.execute()`.

      Returns (SnowflakeCursor):
          :class:`SnowflakeCursor` object that executed the command.


   .. method:: query(self, sql: str, as_df: bool = True, lower: bool = True, on_error: Optional[str] = None) -> Union[pd.DataFrame, SnowflakeCursor]

      Execute a query and return results.

       Default behavior of `results=True` will return results as a
       :class:`pandas.DataFrame`, otherwise will execute the sql provided
       with a :class:`SnowflakeCursor` and return the cursor object.

      :param sql: Raw SQL to execute.
      :type sql: str
      :param as_df: Boolean value indicating whether or not to return results.
      :type as_df: bool
      :param lower: Boolean value indicating whether or not to return results
                    with columns lower-cased.
      :type lower: bool
      :param on_error: String value to impose a specific behavior if an error occurs
                       during the execution of ``sql``.
      :type on_error: str

      Returns (Union[pd.DataFrame, SnowflakeCursor]):
          Results from ``sql`` as a :class:`DataFrame` by default or the
          :class:`SnowflakeCursor` object if `results=False`.


   .. method:: to_table(self, df: pd.DataFrame, table: str, file_format: Optional[str] = None, incl_tmstmp: Optional[bool] = None, on_error: Optional[str] = None, if_exists: Optional[str] = None, as_is: bool = False, **kwargs)

      Table re-implementation.



.. py:class:: Connector(creds: Optional[str] = None, delay: bool = False, ensure_alive: bool = True, config_file_nm: Optional[str] = None, from_config: Optional[str, Path] = None, **connect_kwargs)

   Bases: :class:`snowmobile.core.Snowmobile`

   Primary method of statement execution and configuration management.

   :param creds: Alias for the set of credentials to authenticate with; default
                 behavior will fall back to the ``connection.default-creds``
                 specified in `snowmobile.toml`, `or the first set of credentials
                 stored if this configuration option is left blank`.
   :type creds: Optional[str]
   :param delay: Optionally delay establishing a connection when the object is
                 instantiated, enabling access to the configuration object model
                 through the :attr:`Connector.cfg` attribute; defaults to `False`.
   :type delay: bool
   :param ensure_alive: Establishes a new connection if a method requiring a connection
                        against the database is called while :attr:`alive` is `False`;
                        defaults to `True`.
   :type ensure_alive: bool
   :param config_file_nm: Name of configuration file to use; defaults to `snowmobile.toml`.
   :type config_file_nm: Optional[str]
   :param from_config: A full path to a specific configuration file to use; bypasses any
                       checks for a cached file location and can be useful for container-based
                       processes with restricted access to the local file system.
   :type from_config: Optional[str, Path]
   :param \*\*connect_kwargs: Additional arguments to provide to :meth:`snowflake.connector.connect()`;
                              arguments provided here will over-ride connection arguments specified
                              in `snowmobile.toml`, including:
                                  *   Connection parameters in `connection.default-arguments`
                                  *   Credentials parameters associated with a given alias
                                  *   Connection parameters associated with a given alias

   .. attribute:: cfg

      :class:`snowmobile.Configuration` object, which represents a fully
      parsed/validated `snowmobile.toml` file.

      :type: Configuration`

   .. attribute:: con

      :class:`SnowflakeConnection` object; this attribute is populated
      when a connection is established and can be `None` if the
      :class:`Connector` object was instantiated with `delay=True`.

      :type: SnowflakeConnection

   .. attribute:: sql

      A :class:`snowmobile.SQL` object with the current connection
      embedded; stores command sql commands as utility methods and is
      heavily leveraged in `snowmobile`'s internals.

      :type: SQL

   .. attribute:: e

      A :class:`snowmobile.ExceptionHandler` object for orchestrating
      exceptions across objects; kept as a public attribute on the class
      as examining its contents can be helpful in debugging database errors
      during development.

      :type: ExceptionHandler

   .. method:: connect(self, **kwargs) -> Connector

      Establishes connection to Snowflake.

      Re-implements :func:`snowflake.connector.connect()` with connection
      arguments sourced from snowmobile's object model, specifically:
          *   Credentials from ``snowmobile.toml``.
          *   Default connection arguments from ``snowmobile.toml``.
          *   Optional keyword arguments either passed to
              :class:`snowmobile.Connect` or directly to this method.

          kwargs:
              Optional keyword arguments to pass to
              snowflake.connector.connect(); arguments passed here will
              over-ride ``connection.default-arguments`` specified in
              ``snowmobile.toml``.


   .. method:: disconnect(self) -> Connector

      Disconnect from connection with which Connector() was instantiated.


   .. method:: alive(self) -> bool
      :property:

      Check if the connection is alive.


   .. method:: cursor(self) -> SnowflakeCursor
      :property:

      :class:`SnowflakeCursor` accessor.


   .. method:: ex(self, sql: str, on_error: Optional[str] = None, **kwargs) -> SnowflakeCursor

      Executes a command via :class:`SnowflakeCursor`.

      :param sql: ``sql`` command as a string.
      :type sql: str
      :param on_error: String value to impose a specific behavior if an error occurs
                       during the execution of ``sql``.
      :type on_error: str
      :param \*\*kwargs: Optional keyword arguments for :meth:`SnowflakeCursor.execute()`.

      Returns (SnowflakeCursor):
          :class:`SnowflakeCursor` object that executed the command.


   .. method:: query(self, sql: str, as_df: bool = True, lower: bool = True, on_error: Optional[str] = None) -> Union[pd.DataFrame, SnowflakeCursor]

      Execute a query and return results.

       Default behavior of `results=True` will return results as a
       :class:`pandas.DataFrame`, otherwise will execute the sql provided
       with a :class:`SnowflakeCursor` and return the cursor object.

      :param sql: Raw SQL to execute.
      :type sql: str
      :param as_df: Boolean value indicating whether or not to return results.
      :type as_df: bool
      :param lower: Boolean value indicating whether or not to return results
                    with columns lower-cased.
      :type lower: bool
      :param on_error: String value to impose a specific behavior if an error occurs
                       during the execution of ``sql``.
      :type on_error: str

      Returns (Union[pd.DataFrame, SnowflakeCursor]):
          Results from ``sql`` as a :class:`DataFrame` by default or the
          :class:`SnowflakeCursor` object if `results=False`.


   .. method:: to_table(self, df: pd.DataFrame, table: str, file_format: Optional[str] = None, incl_tmstmp: Optional[bool] = None, on_error: Optional[str] = None, if_exists: Optional[str] = None, as_is: bool = False, **kwargs)

      Table re-implementation.



.. py:class:: Loader(df: pd.DataFrame, table: str, sn: Connector, if_exists: Optional[str] = None, path_ddl: Optional[Path] = None, path_output: Optional[str, Path] = None, file_format: Optional[str] = None, incl_tmstmp: bool = True, tmstmp_col_nm: Optional[str] = None, reformat_cols: bool = True, validate_format: bool = True, upper_case_cols: bool = True, lower_case_table: Optional[bool] = False, keep_local: bool = False, on_error: Optional[str] = None)

   Bases: :class:`snowmobile.core.Snowmobile`

   Generic dunder implementation for ``snowmobile`` objects.

   Base class for all ``snowmobile`` objects that do **not** inherit from
   pydantic's BaseModel or configuration class, :class:`Config`.

   .. method:: exists(self)
      :property:

      Indicates if the target table exists.


   .. method:: col_diff(self) -> Dict[int, bool]
      :property:

      Returns diff detail of local DataFrame to in-warehouse table.


   .. method:: cols_match(self) -> bool
      :property:

      Indicates if columns match between DataFrame and table.


   .. method:: load_statements(self, from_script: Path)

      Generates exhaustive list of the statements to execute for a given
      instance of loading a DataFrame.


   .. method:: to_local(self, quote_all: bool = True)

      Export to local file via configuration in ``snowmobile.toml``.


   .. method:: tm_load(self) -> int
      :property:

      Seconds elapsed during loading.


   .. method:: tm_validate_load(self) -> int
      :property:

      Seconds elapsed during validation.


   .. method:: tm_total(self)
      :property:

      Total seconds elapsed for load.


   .. method:: validate(self, if_exists: str) -> None

      Validates load based on current state through a variety of operations.

      :param if_exists: Desired behavior if table already exists; intended to be passed
                        in from :meth:`table.load()` by default.
      :type if_exists: str


   .. method:: load(self, if_exists: Optional[str] = None, verbose: bool = True, from_script: Path = None, validate: bool = True, **kwargs) -> Loader



.. py:class:: Script(sn: Connector, path: Optional[Path, str] = None, as_generic: bool = False)

   Bases: :class:`snowmobile.core.Snowmobile`

   Generic dunder implementation for ``snowmobile`` objects.

   Base class for all ``snowmobile`` objects that do **not** inherit from
   pydantic's BaseModel or configuration class, :class:`Config`.

   .. method:: read(self, path: Path = None) -> Script

      Runs quick path validation and reads in a sql file as a string.

      A valid `path` must be provided if the `script.path` attribute hasn't
      been set; ``ValueErrors`` will be thrown if neither is valid.

      :param path: Full path to a sql object.
      :type path: pathlib.Path


   .. method:: from_str(self, sql: str, name: str, directory: Path = Path.cwd()) -> Script

      Instantiates a raw string of sql as a script.


   .. method:: source_stream(self) -> sqlparse.sql.Statement
      :property:

      Parses source sql into individual statements.


   .. method:: add_statement(self, s: Optional[sqlparse.sql.Statement, str], index: Optional[int] = None) -> None

      Adds a statement object to the script.

      Default behavior will only add ``sqlparse.sql.Statement`` objects
      returned from ``script.source_stream``.

      ``clean_parse()`` utility function is utilized so that generated sql
      within Python can be inserted back into the script as raw strings.

      :param s: A sqlparse.sql.Statement object or a raw string of SQL for an
                individual statement.
      :type s: Union[sqlparse.sql.Statement, str]
      :param index: Index position of the statement within the script; defaults
                    to ``n + 1`` if index is not provided where ``n`` is the number
                    of statements within the script at the time ``add_statement()``
                    is called.
      :type index: int


   .. method:: filter(self, as_id: Optional[Union[str, int]] = None, from_id: Optional[Union[str, int]] = None, incl_kw: Optional[List] = None, incl_obj: Optional[List] = None, incl_desc: Optional[List] = None, incl_anchor: Optional[List] = None, incl_nm: Optional[List] = None, excl_kw: Optional[List] = None, excl_obj: Optional[List] = None, excl_desc: Optional[List] = None, excl_anchor: Optional[List] = None, excl_nm: Optional[List] = None, last: bool = False) -> ContextManager[Script]


   .. method:: depth(self) -> int
      :property:

      Count of statements in the script.


   .. method:: lines(self) -> int
      :property:

      Number of lines in the script


   .. method:: statements(self) -> Dict[int, Statement]
      :property:

      All statements by index position included in the current context.


   .. method:: excluded(self)
      :property:

      All statements by index position excluded from the current context.


   .. method:: executed(self) -> Dict[int, Statement]
      :property:

      Executed statements by index position included in the current context.


   .. method:: statement(self, _id: Optional[str, int] = None) -> Any[Statement, Empty, Diff]

      Fetch a single statement by _id.


   .. method:: reset(self, index: bool = False, ctx_id: bool = False, in_context: bool = False, scope: bool = False, _filter: bool = False) -> Script

      Resets indices and scope on all statements to their state as read from source.

      Invoked before exiting :meth:`filter()` context manger to reverse
      the revised indices set by :meth:`index_to()` and inclusion/
      exclusion scope set by :meth:`Statement.Tag.scope()`.


   .. method:: duplicates(self) -> Dict[str, int]
      :property:

      Dictionary of indistinct statement names/tags within script.


   .. method:: contents(self, by_index: bool = True, ignore_scope: bool = False, markers: bool = False, validate: bool = True) -> Dict[Union[int, str], Statement]

      Dictionary of all executed statements with option to ignore current
      scope.


   .. method:: dtl(self, full: bool = False) -> None

      Prints summary of statements within the current scope to console.


   .. method:: first_s(self)
      :property:

      First statement by index position.


   .. method:: last_s(self)
      :property:

      Last statement by index position


   .. method:: first(self) -> Union[Statement, Empty, Diff]
      :property:

      First statement executed.


   .. method:: last(self) -> Union[Statement, Empty, Diff]
      :property:

      Last statement executed.


   .. method:: doc(self, alt_file_nm: Optional[str] = None, alt_file_prefix: Optional[str] = None, alt_file_suffix: Optional[str] = None, incl_markers: Optional[bool] = True, incl_sql: Optional[bool] = True, sql_incl_export_disclaimer: Optional[bool] = True) -> Markup

      Markup object based on current context.


   .. method:: ids_from_iterable(self, _id: Optional[Union[Tuple, List]] = None) -> List[int]

      Utility function to get a list of statement IDs given an `_id`.

      Invoked within script.run() if the `_id` parameter is either a:
          (1) tuple of integers (lower and upper bound of statement indices
              to run)
          (2) list of integers or strings (statement names or indices to run)
          (3) default=None; returns all statement indices within scope if so

      :param _id Union[Tuple: _id field provided to script.run() if it's neither an integer
                              or a string.
      :param List]: _id field provided to script.run() if it's neither an integer
                    or a string.

      :returns: *List[int]* --     A list of statement indices to run.


   .. method:: run(self, _id: Optional[str, int, Tuple, List] = None, as_df: bool = True, on_error: Optional[str] = None, on_exception: Optional[str] = None, on_failure: Optional[str] = None, lower: bool = True, render: bool = False, **kwargs)


   .. method:: s(self, _id) -> Statement

      Accessor for :meth:`statement`.


   .. method:: st(self) -> Dict[Union[int, str], Statement]
      :property:

      Accessor for :attr:`statements`.



.. py:class:: Statement(sn: Connector, statement: Union[sqlparse.sql.Statement, str], index: Optional[int] = None, attrs_raw: Optional[str] = None, e: Optional[ExceptionHandler] = None, **kwargs)

   Bases: :class:`snowmobile.core.Tag`, :class:`snowmobile.core.Snowmobile`

   Base class for all :class:`Statement` objects.

   Home for attributes and methods that are associated with **all** statement
   objects, generic or QA.

   .. attribute:: sn

      :class:`snowmobile.Connect` object.

      :type: snowmobile.Connect

   .. attribute:: statement

      A :class:`sqlparse.sql.Statement` object.

      :type: Union[sqlparse.sql.Statement, str]

   .. attribute:: index

      The context-specific index position of a statement within a script;
      can be `None`.

      :type: int

   .. attribute:: _index

      The original index position of a statement as read from the source;
      This is used to restore the index position of a given statement
      before exiting a specified context within :class:`snowmobile.Script`.

      :type: int

   .. attribute:: patterns

      :class:`config.Pattern` object for more succinct access to
      values specified in **snowmobile.toml**.

      :type: config.Pattern

   .. attribute:: results

      The results of the statement if executed as a :class:`pandas.DataFrame`.

      :type: pd.DataFrame

   .. attribute:: outcome

      Numeric indicator of outcome; defaults to `0` and is modified
      based on the outcome of statement execution and/or QA validation
      for derived classes.

      :type: int

   .. attribute:: outcome_txt

      Plain text of outcome ('skipped', 'failed', 'completed', 'passed').

      :type: str

   .. attribute:: outcome_html

      HTML text for the outcome as an admonition/information banner
      based on the following mapping of :attr:`outcome_txt` to
      admonition argument:
          *   `failed` ------> `warning`
          *   `completed` --> `info`
          *   `passed` -----> `success`

      :type: str

   .. attribute:: start_time

      Unix timestamp of the query start time if executed; 0 otherwise.

      :type: int

   .. attribute:: end_time

      Unix timestamp of the query end time if executed; 0 otherwise.

      :type: int

   .. attribute:: execution_time

      Execution time of the query in seconds if executed; 0 otherwise.

      :type: int

   .. attribute:: execution_time_txt

      Plain text description of execution time if executed; returned in
      seconds if execution time is less than 60 seconds, minutes otherwise.

      :type: str

   .. attribute:: attrs_raw

      A raw string of the tag/attributes associated with the statement.

      :type: str

   .. attribute:: attrs_parsed

      A parsed dictionary of the tag/attributes associated with the statement.

      :type: dict

   .. attribute:: is_tagged

      Indicates whether or not the statement is tagged by the user.

      :type: bool

   .. attribute:: is_multiline

      Indicates whether or not a statement tag is a multiline tag; will
      be `False` by default if :attr:`is_tagged` is `False`.

      :type: bool

   .. attribute:: first_keyword

      The first keyword within the statement as a :class:`sqlparse.sql.Token`.

      :type: sqlparse.sql.Token

   .. attribute:: sql

      The sql associated with the statement as a raw string.

      :type: str

   .. attribute:: tag

      :class:`Tag` object associated with the statement.

      :type: Tag

   .. method:: parse(self) -> Tuple[Dict, str]

      Parses a statement tag into a valid dictionary.

      Uses the values specified in **snowmobile.toml** to parse a
      raw string of statement arguments into a valid dictionary.

      .. note::

         *   If :attr:`is_multiline` is `True` and `name` is not included
             within the arguments, an assertion error will be thrown.
         *   If :attr:`is_multiline` is `False`, the raw string within
             the tag will be treated as the name.
         *   The :attr:`tag` attribute is set once parsing is completed
             and name has been validated.

      Returns (dict):
          Parsed tag arguments as a dictionary.


   .. method:: start(self)

      Sets :attr:`start_time` attribute.


   .. method:: end(self)

      Updates execution time attributes.

      In total, sets:
          *   :attr:`end_time`
          *   :attr:`execution_time`
          *   :attr:`execution_time_txt`


   .. method:: attrs_total(self) -> Dict
      :property:

      Parses namespace for attributes specified in **snowmobile.toml**.

      Searches attributes for those matching the keys specified in
      ``script.markdown.attributes.aliases`` within **snowmobile.toml**
      and adds to the existing attributes stored in :attr:`attrs_parsed`
      before returning.

      Returns (dict):
          Combined dictionary of statement attributes from those explicitly
          provided within the script and from object's namespace if specified
          in **snowmobile.toml**.


   .. method:: trim(self) -> str

      Statement as a string including only the sql and a single-line tag name.

      .. note::

         The tag name used here will be the user-provided tag from the
         original script or a generated :attr:`Tag.nm` of a tag was not
         provided for a given statement.


   .. method:: render(self) -> None

      Renders the statement's sql as markdown in Notebook/IPython environments.


   .. method:: is_derived(self)
      :property:

      Indicates whether or not it's a generic or derived (QA) statement.


   .. method:: lines(self) -> int
      :property:

      Depth of the statement's sql by number of lines.


   .. method:: as_section(self, incl_raw: Optional[bool] = None) -> Section

      Returns current statement as a :class:`Section` object.


   .. method:: set_state(self, index: Optional[int] = None, ctx_id: Optional[int] = None, in_context: Optional[bool] = None, filters: dict = None) -> Statement

      Sets current state/context on a statement object.

      :param ctx_id: Unix timestamp the :meth:`script.filter()` context manager was
                     invoked.
      :type ctx_id: int
      :param filters: Kwargs passed to :meth:`script.filter()`.
      :type filters: dict
      :param index: Integer to set as the statement's index position.
      :type index: int


   .. method:: reset(self, index: bool = False, ctx_id: bool = False, in_context: bool = False, scope: bool = False) -> Statement

      Resets attributes on the statement object to reflect as if read from source.

      In its current form, includes:
          *   Resetting the statement/tag's index to their original values.
          *   Resetting the :attr:`is_included` attribute of the statement's
              :attr:`tag` to `True`.
          *   Populating :attr:`error_last` with errors from current context.
          *   Caching current context's timestamp and resetting back to `None`.


   .. method:: process(self)

      Used by derived classes for post-processing the returned results.


   .. method:: run(self, as_df: bool = True, lower: bool = True, render: bool = False, on_error: Optional[str] = None, on_exception: Optional[str] = None, on_failure: Optional[str] = None, ctx_id: Optional[int] = None) -> Statement

      Run method for all statement objects.

      :param as_df: Store results of query as :class:`pandas.DataFrame` or
                    :class:`SnowflakeCursor`.
      :type as_df: bool
      :param lower: Lower case column names in :attr:`results` DataFrame if
                    `as_df=True`.
      :type lower: bool
      :param render: Render the sql executed as markdown.
      :type render: bool
      :param on_error:
                       Behavior if an execution/database error is encountered
                           * `None`: default behavior, exception will be raised
                           * `c`: continue with execution
      :type on_error: str
      :param on_exception: Behavior if an exception is raised in the **post-processing**
                           of results from a derived class of :class:`Statement` (
                           :class:`Empty` and :class:`Diff`).
                               * `None`: default behavior, exception will be raised
                               * `c`: continue with execution
      :type on_exception: str
      :param on_failure: Behavior if no error is encountered in execution or post-processing
                         but the result of the post-processing has turned the statement's
                         :attr:`outcome` attribute to False, indicating the results
                         returned by the statement have failed validation.
                             * `None`: default behavior, exception will be raised
                             * `c`: continue with execution
      :type on_failure: str

      Returns (Statement):
          Statement object post-executing query.


   .. method:: outcome_txt(self, _id: Optional[int] = None) -> str

      Outcome as a string.


   .. method:: outcome_html(self) -> str
      :property:

      Outcome as an html admonition banner.



.. function:: export_config(target_dir: Optional[Union[str, Path]] = None)

   Exports template `snowmobile.toml` file.


