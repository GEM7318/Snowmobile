{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "\n",
    "from pathlib import Path\n",
    "\n",
    "for p in [\n",
    "    r'C:\\Users\\GEM7318\\Documents\\Github\\Snowmobile',\n",
    "    r'C:\\Program Files\\JetBrains\\PyCharm 2019.3.4\\plugins\\python\\helpers\\pycharm_matplotlib_backend',\n",
    "    r'C:\\Users\\GEM7318\\Anaconda3\\envs\\snowmobile2\\lib\\site-packages\\IPython\\extensions',\n",
    "    r'C:\\Users\\GEM7318\\Anaconda3\\envs\\snowmobile2',\n",
    "    r'C:\\Users\\GEM7318\\Anaconda3\\envs\\snowmobile2\\lib',\n",
    "    r'C:\\Users\\GEM7318\\Anaconda3\\envs\\snowmobile2\\lib\\site-packages',\n",
    "]:\n",
    "    sys.path.append(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import snowmobile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Locating credentials...\n",
      "(1 of 2) Checking for cached path...\n",
      "(2 of 2) Cached path found at ../Snowmobile/snowmobile.toml\n",
      "..connected: snowmobile.Connector(creds='gem7318')\n"
     ]
    }
   ],
   "source": [
    "sn = snowmobile.Connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "scripts = {\n",
    "    p.name: p for p in (Path.cwd() / 'tests').rglob('*.sql')\n",
    "    if p.is_file()\n",
    "}\n",
    "scripts2 = {\n",
    "    p.name: p for p in (Path.cwd() / '_runner').rglob('*.sql')\n",
    "    if p.is_file()\n",
    "}\n",
    "scripts.update(scripts2)\n",
    "path_qa = scripts['tags_qa_statements.sql']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======================\n",
      "tags_qa_statements.sql\n",
      "======================\n",
      " 1: Statement('create-temp table~sample_table')\n",
      " 2: Statement('qa-empty~verify an expected pass')\n",
      " 3: Statement('qa-empty~verify an expected failure')\n",
      " 4: Statement('qa-diff~verify an expected pass (n=2)')\n",
      " 5: Statement('qa-diff~verify an expected pass (n=3)')\n",
      " 6: Statement('qa-diff~verify an expected pass')\n",
      " 7: Statement('qa-diff~verify an expected pass')\n",
      " 8: Statement('qa-diff~verify an expected failure')\n",
      " 9: Statement('qa-diff~verify an expected pass')\n",
      "10: Statement('qa-diff~verify an exception is thrown')\n"
     ]
    }
   ],
   "source": [
    "script = snowmobile.Script(path=path_qa, sn=sn)\n",
    "script.dtl()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " <1 of 10> create-temp table~sample_table (0s)........... <completed>\n"
     ]
    }
   ],
   "source": [
    "script.run(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======================\n",
      "tags_qa_statements.sql\n",
      "======================\n",
      " 1: Statement('create-temp table~sample_table')\n",
      " 2: Statement('qa-empty~verify an expected pass')\n",
      " 3: Statement('qa-empty~verify an expected failure')\n",
      " 4: Statement('qa-diff~verify an expected pass (n=2)')\n",
      " 5: Statement('qa-diff~verify an expected pass (n=3)')\n",
      " 6: Statement('qa-diff~verify an expected pass')\n",
      " 7: Statement('qa-diff~verify an expected pass')\n",
      " 8: Statement('qa-diff~verify an expected failure')\n",
      " 9: Statement('qa-diff~verify an expected pass')\n",
      "10: Statement('qa-diff~verify an exception is thrown')\n",
      "11: Statement('select data~statement #11')\n"
     ]
    }
   ],
   "source": [
    "script.add_statement('select * from sample_table')\n",
    "script.dtl()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "```sql\n",
       "select * from sample_table;\n",
       "```"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dummy_dim</th>\n",
       "      <th>dummy_exclude</th>\n",
       "      <th>dummy_col</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   dummy_dim  dummy_exclude  dummy_col\n",
       "0          1              1          1\n",
       "1          2              1          1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "script.run(11, render=True)\n",
    "script.last.results.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "snowmobile3",
   "language": "python",
   "name": "snowmobile3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
